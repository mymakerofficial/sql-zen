import type { Statement } from '@/lib/statements/interface'
import type { QueryState } from '@/lib/queries/enums'
import { EventPublisher } from '@/lib/events/publisher'
import type { QueryEventMap } from '@/lib/queries/events'

// there is a difference between the QueryResult.id and Query.id
//  QueryResult.id is generated by the database when a statement is successfully executed
//  Query.id is generated by the application when the query is created

export type QueryResult<T extends object = object> = {
  rows: Array<T>
  affectedRows: number | null
  duration: number
  id: string
}

export type PaginatedQueryResult<T extends object = object> = QueryResult<T> & {
  offset: number
  limit: number
}

export type QueryInfo = {
  id: string
  statementKey: string
  state: QueryState
  hasResult: boolean
  hasResultRows: boolean
}

export interface IQuery<T extends object = object>
  extends EventPublisher<QueryEventMap>,
    QueryInfo {
  readonly id: string
  getId(): string
  readonly state: QueryState
  getState(): QueryState
  readonly statementKey: string
  getStatement(): Statement
  readonly hasResult: boolean
  getHasResult(): boolean
  readonly hasResultRows: boolean
  getHasResultRows(): boolean
  getResult(): QueryResult<T> | PaginatedQueryResult<T> | null
  getError(): Error | null
  getTotalRowCount(): { min: number; isKnown: boolean }
  computeTotalRowCount(): Promise<void>
  // execute the query, if statement is a SELECT, the first 100 rows are stored in the result
  execute(): Promise<void>
  fetchRows(offset: number, limit: number): Promise<void>
  cancel(): void
  toInfo(): QueryInfo
}
