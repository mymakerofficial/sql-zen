import type { Statement } from '@/lib/statements/interface'
import type { QueryState } from '@/lib/queries/enums'

// there is a difference between the QueryResult.id and Query.id
//  QueryResult.id is generated by the database when a statement is successfully executed
//  Query.id is generated by the application when the query is created

export type QueryResult<T extends object = object> = {
  rows: Array<T>
  affectedRows: number | null
  duration: number
  id: string
}

type QueryBase = {
  id: string
  statement: Statement
}

export type IdleQuery = QueryBase & {
  state: typeof QueryState.Idle
  when: null
}

export type RunningQuery = QueryBase & {
  state: typeof QueryState.Executing
  when: number
}

export type SuccessQuery<T extends object = object> = QueryBase & {
  state: typeof QueryState.Success
  result: QueryResult<T>
  when: number
}

export type ErrorQuery = QueryBase & {
  state: typeof QueryState.Error
  errorMessage: string
  when: number
}

export type CancelledQuery = QueryBase & {
  state: typeof QueryState.Cancelled
  when: number | null
}

export type Query<T extends object = object> =
  | IdleQuery
  | RunningQuery
  | SuccessQuery<T>
  | ErrorQuery
  | CancelledQuery
