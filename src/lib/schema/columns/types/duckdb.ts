export const DuckDBDataType = {
  BigInt: 'BIGINT',
  Bit: 'BIT',
  Blob: 'BLOB',
  Boolean: 'BOOLEAN',
  Date: 'DATE',
  Decimal: 'DECIMAL',
  Double: 'DOUBLE',
  Float: 'FLOAT',
  HugeInt: 'HUGEINT',
  Integer: 'INTEGER',
  Interval: 'INTERVAL',
  SmallInt: 'SMALLINT',
  Time: 'TIME',
  TimestampWithTimezone: 'TIMESTAMP_WITH_TIMEZONE',
  Timestamp: 'TIMESTAMP',
  TinyInt: 'TINYINT',
  UBigInt: 'UBIGINT',
  UHugeInt: 'UHUGEINT',
  UInteger: 'UINTEGER',
  USmallInt: 'USMALLINT',
  UTinyInt: 'UTINYINT',
  Uuid: 'UUID',
  Varchar: 'VARCHAR',
} as const
export type DuckDBDataType =
  (typeof DuckDBDataType)[keyof typeof DuckDBDataType]

export const DuckDBTypeMap = {
  ['BIGINT']: DuckDBDataType.BigInt,
  ['BIT']: DuckDBDataType.Bit,
  ['BLOB']: DuckDBDataType.Blob,
  ['BOOLEAN']: DuckDBDataType.Boolean,
  ['DATE']: DuckDBDataType.Date,
  ['DECIMAL']: DuckDBDataType.Decimal,
  ['DOUBLE']: DuckDBDataType.Double,
  ['FLOAT']: DuckDBDataType.Float,
  ['HUGEINT']: DuckDBDataType.HugeInt,
  ['INTEGER']: DuckDBDataType.Integer,
  ['INTERVAL']: DuckDBDataType.Interval,
  ['SMALLINT']: DuckDBDataType.SmallInt,
  ['TIME']: DuckDBDataType.Time,
  ['TIMESTAMPZ']: DuckDBDataType.TimestampWithTimezone,
  ['TIMESTAMP']: DuckDBDataType.Timestamp,
  ['TINYINT']: DuckDBDataType.TinyInt,
  ['UBIGINT']: DuckDBDataType.UBigInt,
  ['UHUGEINT']: DuckDBDataType.UHugeInt,
  ['UINTEGER']: DuckDBDataType.UInteger,
  ['USMALLINT']: DuckDBDataType.USmallInt,
  ['UTINYINT']: DuckDBDataType.UTinyInt,
  ['UUID']: DuckDBDataType.Uuid,
  ['VARCHAR']: DuckDBDataType.Varchar,
} as const satisfies Record<string, DuckDBDataType>
